题目：
给定一个二叉树，判断其是否是一个有效的二叉搜索树。

假设一个二叉搜索树具有如下特征：

节点的左子树只包含小于当前节点的数。
节点的右子树只包含大于当前节点的数。
所有左子树和右子树自身必须也是二叉搜索树。

示例 1:
输入:
    2
   / \
  1   3
输出: true

示例 2:
输入:
    5
   / \
  1   4
     / \
    3   6
输出: false
解释: 输入为: [5,1,4,null,null,3,6]。
     根节点的值为 5 ，但是其右子节点值为 4 。
	 
错误代码：
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
bool isValidBST(struct TreeNode* root) {
    struct TreeNode* l_child,r_child;
    
    if(root!=NULL){
        l_child=root->left;
        r_child=root->right;
        if(l_child != NULL)
            isValidBST(l_child);
        if(r_child != NULL)
            isValidBST(r_child);
        
        if((l_child->val < root_val) && (r_child->val > root->val))
            return true;
    }
}

错误思路分析：
想递归依次判断其左右子树是否为一棵有效二叉搜索树
但是这种思路是错的，请看示例2，
示例 2:
输入:
    5
   / \
  1   4
     / \
    3   6

[1,5,4]和[3,4,6]都是有效的二叉搜索树，但是整棵树却不是一棵有效的二叉搜索树，因为4<5,而4是右节点