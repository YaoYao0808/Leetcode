题目：
给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。

如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。

您可以假设除了数字 0 之外，这两个数都不会以 0 开头。

示例：

输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
输出：7 -> 0 -> 8
原因：342 + 465 = 807

代码1：显示超时
struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) {    
    if(l1 == NULL) return l2;
    if(l2 == NULL) return l1;

    struct ListNode *p=l1,*q=l2;
    
    struct ListNode *result=(struct ListNode *)malloc(sizeof(struct ListNode));
    result->val=0;
    
    struct ListNode* p_end=result;
    
    int sum=0;
    int carry=0;
    int x=0;
    int y=0;
    
    while(p!=NULL || q!=NULL){
        if(p==NULL){
            x=0;
            y=q->val;
        }
        else if(q==NULL){
            x=p->val;
            y=0;
        }else{
            x=p->val;
            y=q->val;
        }
        sum=x+y+carry;
        carry=sum/10;
        
        int data=sum%10;
    
        struct ListNode* pp;
        pp= (struct ListNode *)malloc(sizeof(struct ListNode));
        p_end->next=pp;
        pp->val=data;
        p_end=p_end->next;
//         pp->val=data;
//         pp->next=NULL;
        
//         pp=pp->next;
    }
    return result;
    
}

代码二：修改后  但是仍然存在Bug  
struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) {    

    struct ListNode *p=l1,*q=l2;
    
    struct ListNode *result=(struct ListNode *)malloc(sizeof(struct ListNode));
    result->val=0;
    
    struct ListNode* p_end=result;
    
    int sum=0;
    int carry=0;
    int x=0;
    int y=0;
    
    while(true){
		if(p==NULL && q=NULL && carry=0){
			return result;
		}
		if(p==NULL && q=NULL){
			struct ListNode* pp;
			pp= (struct ListNode *)malloc(sizeof(struct ListNode));
			p_end->next=pp;
			return result;
		}else if(l2==NULL){
			int temp=l1->val+carry;
			sum=temp%10;
			carry=temp/10;
			p=p->next;
		}else if(l1==NULL){
			int temp=l2-val+carry;
			sum=temp%10;
			carry=temp/10;
			q=q->next;
		}else{
			int temp = l1->val + l2-val + carry;
			sum=temp%10;
			carry=temp/10;
			p=p->next;
			q=q->next;
		}
		
		struct ListNode* pp;
		pp= (struct ListNode *)malloc(sizeof(struct ListNode));
		
        p_end.next = pp
        p_end = p_end.next;
		
	}
    return result;
    
}

代码三：已经通过
问题：如何解决逆序的问题？

void deeltail(struct ListNode * pre,struct ListNode * r,int carry);

struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) {
    struct ListNode * head ,*p,*q,*pre;
    int carry = 0;
    if(l1 == NULL) return l2;
    if(l2 == NULL) return l1;
    
    head = l1;
    p = head;
    
    while(l1 && l2){
        pre = p;//指向p指针的前向指针
        p->val = l1->val + l2->val + carry;
        carry = 0;
        if(p->val > 9){
            p->val -= 10;
            carry = 1;
        }
        l1 = l1->next;
        l2 = l2->next;
        p = p->next;
    }
    if(!l1 && !l2){//l1与l2都只有一个数
        if(carry){
            q= (struct ListNode *)malloc(sizeof(struct ListNode));
            q->val = carry;
            q->next = NULL;
            pre->next = q;
        }
    }
    else if(l2){//l1的长度小于l2,由于head最初是指向l1的，特殊处理
       deeltail(pre,l2,carry);
    }
    else{//l1的长度大于l2
       deeltail(pre,l1,carry);
    }
    return head;
}
void deeltail(struct ListNode * pre,struct ListNode * r,int carry){
    struct ListNode * q;
    pre->next = r;
    q = pre->next;
    while(q){
        q->val +=carry;
        if(q->val>9){
            q->val -= 10;
            carry = 1;
        }else{
            carry =0;
            
        }
        pre = q;
        q = q->next;
    }
    if(carry){//最后一个节点加上进位大于10需处理多出来的节点，val=1
        q= (struct ListNode *)malloc(sizeof(struct ListNode));
        q->val = carry;
        q->next = NULL;
        pre->next = q;
    }
}

代码四：已通过 代码最为简洁
struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) {
    
    struct ListNode *p1=l1;
    struct ListNode *p2=l2;
    struct ListNode *result=(struct ListNode *)malloc(sizeof(struct ListNode));   //程序需要返回的是链表
    result->val=0;
 
    struct ListNode *p=NULL;
    int c=0;
    while (p1!=NULL || p2!=NULL || c!=0)   //终止条件：p1为空且p2为空且c等于0
    {
        if(p == NULL)
        {
            p=result;
        }
        else
        {
			//此处含义要理解：由于是返回链表，并且起初之定义了result头节点，因此后面每生成一个元素，都要新增节点
            p->next=(struct ListNode*)malloc(sizeof(struct ListNode)); //这里写成p会出错    
            p->next->val=0;
            p=p->next;
        }
        int a=(p1==NULL ? 0:p1->val);  //p1为空，则为0；否则为其对应该的数字
        int b=(p2==NULL ? 0:p2->val);
        int s=(a+b+c)%10;  //求和取余数 
        c=(a+b+c)/10;      //求进位 只可能为0或者1，
        p->val=s;     
        p->next=NULL;
   
        p1=(p1==NULL ? NULL : p1->next);
        p2=(p2==NULL ? NULL : p2->next);
 
    }
    return result;
} 



