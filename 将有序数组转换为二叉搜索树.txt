题目：
将一个按照升序排列的有序数组，转换为一棵高度平衡二叉搜索树。

本题中，一个高度平衡二叉树是指一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1。

示例:

给定有序数组: [-10,-3,0,5,9],

一个可能的答案是：[0,-3,9,-10,null,5]，它可以表示下面这个高度平衡二叉搜索树：

      0
     / \
   -3   9
   /   /
 -10  5
 
 代码：
 //返回nums指定部分数字的平衡二叉树
struct TreeNode* sortedArrayToBSTCore(int *nums,int start,int end)
{
//     索引不合法  
    if(start>end||start<0)
    {
        return NULL;
    }
	
	//中间的元素生成为根结点
    struct TreeNode* root=(struct TreeNode *)malloc(sizeof(struct TreeNode));
    int mid=(start+end)/2;
    
    root->val=nums[mid];
	
    root->left=sortedArrayToBSTCore(nums,start,mid-1);
    root->right=sortedArrayToBSTCore(nums,mid+1,end);
    return root;
}

 struct TreeNode* sortedArrayToBST(int* nums, int numsSize) {
//     数组为空
    if(nums==NULL || numsSize<=0)
    {
        return NULL;
    }
    struct TreeNode* root=sortedArrayToBSTCore(nums,0,numsSize-1);
    
    return root;    
}
