题目：
给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。

示例:

输入: [-2,1,-3,4,-1,2,1,-5,4],
输出: 6
解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。
进阶:

如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的分治法求解。

代码：
int maxSubArray(int* nums, int numsSize) {
    /*
    思路：可以依次比较大小：加入数组后一个元素与不加入后一个元素
    问题：如何保证连续？
    sum = nums[i]; 
    此题关键点：sum与0做比较
    因为求得连续最大和的子数组最少包含一个元素，即数组中任何一个正数已经满足此情况
    */
    int sum = 0;
    int max = nums[0];
    for(int i=0;i<numsSize;i++)
    {
        if(sum>=0)
            sum += nums[i];
        else 
            sum = nums[i]; //注意这条语句的含义，就可以保证其连续性
        if(max < sum)
            max = sum;
    }
    return max;
}