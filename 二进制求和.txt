题目：
给定两个二进制字符串，返回他们的和（用二进制表示）。

输入为非空字符串且只包含数字 1 和 0。

示例 1:

输入: a = "11", b = "1"
输出: "100"
示例 2:

输入: a = "1010", b = "1011"
输出: "10101"

代码一：
char* addBinary(char* a, char* b) {
    int al=strlen(a);
    int bl=strlen(b);
	
    int len=al>bl?al+2:bl+2;   //如果a1>b1,则len=a1+2,否则len=b1+2
	//int len=al>bl?al+1:bl+1;  //+1也是可行的    
	
    char *result=(char*)malloc(len+1);   //题目返回的为字符串数组
    int i,j,cur,temp;
    i=al-1,j=bl-1;  //从尾端开始遍历
    temp=cur=0;
	
    while(i>=0&&j>=0){
       if((a[i]-'0')+(b[j]-'0')==2){  //要将字符串转换为ASCII码
           if(temp==1){
               result[cur]='1';  //输入: a = "1010", b = "1011" 输出: "10101"
           }else{
               result[cur]='0';
           }
           temp=1;
       }else if((a[i]-'0')+(b[j]-'0')==1){
           if(temp==1){
             result[cur]='0';
             temp=1;
           }else{
              result[cur]='1';
              temp=0;
           }
       }else{
           result[cur]=temp+'0';
           temp=0;
       }
       --i,--j,++cur;
    }
	
	//字符串a比b长
    while(i>=0){  
        if(temp==1&&a[i]=='0'){
            result[cur]='1';
            temp=0;
        }else if(temp==1&&a[i]=='1'){
            result[cur]='0';
            temp=1;
        }else{
            result[cur]=a[i];
        }
        ++cur,--i;
    }
	//字符串b比a长
     while(j>=0){
        if(temp==1&&b[j]=='0'){
            result[cur]='1';
            temp=0;
        }else if(temp==1&&b[j]=='1'){
            result[cur]='0';
            temp=1;
        }else{
            result[cur]=b[j];
        }
        ++cur,--j;
    }
	//出现最后进位的情况
    if(temp==1)
      result[cur++]='1';
    result[cur]='\0'
	;
    int t=0;
    for(int k=0,m=cur-1;k<m;++k,--m){
        t=result[k];
        result[k]=result[m];
        result[m]=t;
    }
    return result;
}

代码二：
char* addBinary(char* a, char* b) {
    int add = 0;
    int i = strlen(a)-1, j = strlen(b)-1;
    int size = i > j ? i+1 : j+1;  
	
    char *result = (char*)malloc(sizeof(char)*(size+2));
    result[size+1] = '\0';
	
    for (int k = size; k>=0; k--, i--, j--) {  //i,j用于遍历，k用于最后存储返回元素
        int n;
		//一个if else循环先将两个字符串做相加 
        if (i >= 0 || j >= 0) {
            if (i >= 0 && j >= 0) {
                n = a[i]-'0'+b[j]-'0'+add;
            } else if (i >= 0) {
                n = a[i]-'0'+add;
            } else {
                n = b[j]-'0'+add;
            }
        } else { // 此情况为两个字符串长度一致
            n = add;
        }
		
		//n为相加后的结果
        if (n > 1) {
            add = 1;
            n -= 2;
        } else {
            add = 0;
        }
        result[k] = n+'0';
    }
    //如果字符串是以0开头，则后移一位
    if (result[0]-'0' == 0) {
        *result++;
    }
    
    return result;
}
