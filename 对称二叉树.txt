题目：
给定一个二叉树，检查它是否是镜像对称的。
例如，二叉树 [1,2,2,3,4,4,3] 是对称的。

    1
   / \
  2   2
 / \ / \
3  4 4  3
但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的:

    1
   / \
  2   2
   \   \
   3    3
   
代码：
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
bool isSymmetric1(struct TreeNode* left,struct TreeNode* right){
    
    if((!left)&&(!right)){
        return true;
    }else if(!left||!right){
        return false;
    }else{
        if(left->val!=right->val){
            return false;
        }else{
            return isSymmetric1(left->left,right->right)&&isSymmetric1(left->right,right->left);
        }
    }
}
 
//主函数
bool isSymmetric(struct TreeNode* root) {
    if(!root){
        return true;
    }else{
        return isSymmetric1(root->left,root->right);
        
    }
}

思路：
三种情况
1.左右子树都为空，则对称
2.左子树为空，或者，右子树为空，false不对称
3.左右子树都不为空：
	if 左右子树的值不相等
		false不对称
	if 左右子树的值相等
		进一步判断，左子树的左子树与右子树的右子树是否对称
		       并且，左子树的右子树和右子树的左子树是否对称
